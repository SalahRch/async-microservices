image: docker:24.0.5

services:
  - docker:24.0.5-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

stages:
  - build
  - test-category
  - test-inventory
  - test-notifications
  - test-product-publisher
  - deploy

before_script:
  - docker info

# 1. Build Stage
build:
  stage: build
  script:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"  # Login to DockerHub
    # Build and tag each microservice
    - docker build -t "$DOCKER_USERNAME/category:$CI_COMMIT_SHA" ./services/category
    - docker build -t "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA" ./services/inventory
    - docker build -t "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA" ./services/notifications
    - docker build -t "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA" ./services/product-publisher
    # Push all images to DockerHub
    - docker push "$DOCKER_USERNAME/category:$CI_COMMIT_SHA"
    - docker push "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA"
    - docker push "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA"
    - docker push "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA"

# 2. Test Stage - Category Service
test-category:
  stage: test-category
  script:
    - docker-compose -f docker-compose.yml up -d
    - ./wait-for-it.sh mongo:27017 -- echo "MongoDB is ready"
    - ./wait-for-it.sh kafka:9092 -- echo "Kafka is ready"
    - mvn test -Dtest=*Category* > category-test.log 2>&1 || echo "Category tests failed!"
    - cat category-test.log
  artifacts:
    paths:
      - category-test.log
    expire_in: 1 day
  after_script:
    - docker-compose -f docker-compose.yml down

# 3. Test Stage - Inventory Service
test-inventory:
  stage: test-inventory
  script:
    - docker-compose -f docker-compose.yml up -d
    - ./wait-for-it.sh mongo:27017 -- echo "MongoDB is ready"
    - ./wait-for-it.sh kafka:9092 -- echo "Kafka is ready"
    - mvn test -Dtest=*Inventory* > inventory-test.log 2>&1 || echo "Inventory tests failed!"
    - cat inventory-test.log
  artifacts:
    paths:
      - inventory-test.log
    expire_in: 1 day
  after_script:
    - docker-compose -f docker-compose.yml down

# 4. Test Stage - Notifications Service
test-notifications:
  stage: test-notifications
  script:
    - docker-compose -f docker-compose.yml up -d
    - ./wait-for-it.sh mongo:27017 -- echo "MongoDB is ready"
    - ./wait-for-it.sh kafka:9092 -- echo "Kafka is ready"
    - mvn test -Dtest=*Notifications* > notifications-test.log 2>&1 || echo "Notifications tests failed!"
    - cat notifications-test.log
  artifacts:
    paths:
      - notifications-test.log
    expire_in: 1 day
  after_script:
    - docker-compose -f docker-compose.yml down

# 5. Test Stage - Product Publisher Service
test-product-publisher:
  stage: test-product-publisher
  script:
    - docker-compose -f docker-compose.yml up -d
    - ./wait-for-it.sh mongo:27017 -- echo "MongoDB is ready"
    - ./wait-for-it.sh kafka:9092 -- echo "Kafka is ready"
    - mvn test -Dtest=*ProductPublisher* > product-publisher-test.log 2>&1 || echo "Product Publisher tests failed!"
    - cat product-publisher-test.log
  artifacts:
    paths:
      - product-publisher-test.log
    expire_in: 1 day
  after_script:
    - docker-compose -f docker-compose.yml down

# 6. Deploy Stage
deploy:
  stage: deploy
  script:
    - echo "Deploying to production..."
    - docker-compose -f docker-compose.yml up -d
    # Add deployment steps here (e.g., SSH to your EC2 instance and pull images)
    - docker pull "$DOCKER_USERNAME/category:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA"

    # Run instances after pull
    - docker run -d -p 8282:8080 --name category-container "$DOCKER_USERNAME/category:$CI_COMMIT_SHA"
    - docker run -d -p 8181:8080 --name inventory-container "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA"
    - docker run -d -p 8383:8080 --name notifications-container "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA"
    - docker run -d -p 8484:8080 --name product-publisher-container "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA"

    # Ensure the services are linked correctly (if needed) using Docker networks
    - docker network connect cicd-net category-container
    - docker network connect cicd-net inventory-container
    - docker network connect cicd-net notifications-container
    - docker network connect cicd-net product-publisher-container
  tags:
    - ec2-runner
  only:
    - deploy-to-ec2
