default:
  image: maven:3.8.2-openjdk-17  # Use Maven image
  services:
    - docker:24.0.5-dind  # Docker-in-Docker service    
stages:
  - build packages
  - build containers
  - test 
  - deploy
# Build Packages Stage
build_packages:
  stage: build packages
  script:
    - mvn --version
    - echo "Building microservices with Maven..."
    # Build and package microservices with Maven
    - mvn -f ./services/category/pom.xml clean package deploy -DNEXUS_USER=$NEXUS_USERNAME -DNEXUS_PASSWORD=$NEXUS_PASSWORD
    - mvn -f ./services/inventory/pom.xml clean package deploy -DNEXUS_USER=$NEXUS_USERNAME -DNEXUS_PASSWORD=$NEXUS_PASSWORD
    - mvn -f ./services/notifications/pom.xml clean package deploy -DNEXUS_USER=$NEXUS_USERNAME -DNEXUS_PASSWORD=$NEXUS_PASSWORD
    - mvn -f ./services/product-publisher/pom.xml clean package deploy -DNEXUS_USER=$NEXUS_USERNAME -DNEXUS_PASSWORD=$NEXUS_PASSWORD

# Build Containers Stage
build_containers:
  stage: build containers
  image: docker:24.0.5  # Use Docker image for building containers
  script:
    - docker --version  # Check Docker version
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"  # Login to DockerHub
    - echo "Building Docker containers..."
    # Build and tag each microservice container
    - docker build -t "$DOCKER_USERNAME/category:$CI_COMMIT_SHA" ./services/category
    - docker build -t "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA" ./services/inventory
    - docker build -t "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA" ./services/notifications
    - docker build -t "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA" ./services/product-publisher
    # Push all images to DockerHub
    - docker push "$DOCKER_USERNAME/category:$CI_COMMIT_SHA"
    - docker push "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA"
    - docker push "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA"
    - docker push "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA"
    
sonarqube_scan:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner \
        -Dsonar.projectKey=category-service \
        -Dsonar.sources=services/category/src \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN

    - sonar-scanner \
        -Dsonar.projectKey=inventory-service \
        -Dsonar.sources=services/inventory/src \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN

    - sonar-scanner \
        -Dsonar.projectKey=notifications-service \
        -Dsonar.sources=services/notifications/src \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN

    - sonar-scanner \
        -Dsonar.projectKey=product-publisher \
        -Dsonar.sources=services/product-publisher/src \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN
# 2. Test Stage
#test:
 # stage: test
  #services:
  #  - name: docker:dind  # Ensure Docker is available for testing
 # script:
    # Start the stack defined in docker-compose.yml
    #- docker-compose -f docker-compose.yml up -d
    #- sleep 30  # Wait for services to start
    # Example health checks
    #- curl -f http://localhost:8282/actuator/health || exit 1
    #- curl -f http://localhost:8181/actuator/health || exit 1
   # - curl -f http://localhost:8383/actuator/health || exit 1
    #- curl -f http://localhost:8484/actuator/health || exit 1
    # Shut down the stack after tests
  #  - docker-compose -f docker-compose.yml down#

# 3. Deploy Stage
deploy:
  stage: deploy
  script:
    - echo "Deploying to production..."
    - docker-compose -f docker-compose.yml up -d
    # Add deployment steps here (e.g., SSH to your EC2 instance and pull images)
    - docker pull "$DOCKER_USERNAME/category:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA"

    # Run instances after pull
    - docker run -d -p 8282:8080 --name category-container "$DOCKER_USERNAME/category:$CI_COMMIT_SHA"
    - docker run -d -p 8181:8080 --name inventory-container "$DOCKER_USERNAME/inventory:$CI_COMMIT_SHA"
    - docker run -d -p 8383:8080 --name notifications-container "$DOCKER_USERNAME/notifications:$CI_COMMIT_SHA"
    - docker run -d -p 8484:8080 --name product-publisher-container "$DOCKER_USERNAME/product-publisher:$CI_COMMIT_SHA"

    # Ensure the services are linked correctly (if needed) using Docker networks
    - docker network connect cicd-net category
    - docker network connect cicd-net inventory
    - docker network connect cicd-net notifications
    - docker network connect cicd-net product-publisher
  tags:
    - ec2-runner
  only:
    - deploy-to-ec2
